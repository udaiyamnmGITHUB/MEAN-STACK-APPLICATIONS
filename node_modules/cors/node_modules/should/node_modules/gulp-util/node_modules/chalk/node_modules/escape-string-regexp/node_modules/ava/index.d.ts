export interface Observable {
	subscribe(observer: (value: {}) => void): void;
}

export type Test = (t: TestContext) => Promise<void> | Iterator<any> | Observable | void;
export type ContextualTest = (t: ContextualTestContext) => Promise<void> | Iterator<any> | Observable | void;
export type SerialTest = (t: TestContext) => void;
export type ContextualSerialTest = (t: ContextualTestContext) => void;
export type CallbackTest = (t: CallbackTestContext) => void;
export type ContextualCallbackTest = (t: Contex