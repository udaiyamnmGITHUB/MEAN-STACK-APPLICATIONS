// Generated by CoffeeScript 1.10.0
(function() {
  var Client, _, fs, request, version;

  require('pkginfo')(module);

  version = this.version;

  _ = require('underscore');

  fs = require('fs');

  request = require('request');

  Client = (function() {
    var MAX_RETRIES;

    MAX_RETRIES = 5;

    function Client(company, product, options, defaultOptions, extraOptionsList) {
      var config_base, coreDefaultOptions, ext, i, j, k, len, len1, len2, ref, ref1, suffix, suffixes;
      if (options == null) {
        options = {};
      }
      if (defaultOptions == null) {
        defaultOptions = {};
      }
      if (extraOptionsList == null) {
        extraOptionsList = [];
      }
      coreDefaultOptions = {
        user_agent: this.version()
      };
      this.env = options.env;
      this.env || (this.env = process.env[company.toUpperCase() + '_' + product.toUpperCase() + '_ENV'] || process.env[product.toUpperCase() + '_ENV']);
      this.optionsList = ['scheme', 'host', 'port', 'user_agent'].concat(extraOptionsList);
      this.options = {};
      this.loadFromHash('params', options);
      this.loadFromConfig(company, product, options.config);
      this.loadFromConfig(company, product, process.env[company.toUpperCase() + '_' + product.toUpperCase() + '_CONFIG']);
      this.loadFromConfig(company, product, process.env[company.toUpperCase() + '_CONFIG']);
      this.loadFromEnv(company.toUpperCase() + '_' + product.toUpperCase());
      this.loadFromEnv(company.toUpperCase());
      suffixes = [];
      if (this.env != null) {
        suffixes.push("-" + this.env);
        suffixes.push("_" + this.env);
      }
      suffixes.push('');
      for (i = 0, len = suffixes.length; i < len; i++) {
        suffix = suffixes[i];
        ref = ['.json'];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          ext = ref[j];
          ref1 = [company + "-" + product, company + "_" + product, company];
          for (k = 0, len2 = ref1.length; k < len2; k++) {
            config_base = ref1[k];
            this.loadFromConfig(company, product, "" + config_base + suffix + ext);
            this.loadFromConfig(company, product, "." + config_base + suffix + ext);
            this.loadFromConfig(company, product, "~/" + config_base + suffix + ext);
            this.loadFromConfig(company, product, "~/." + config_base + suffix + ext);
          }
        }
      }
      this.loadFromHash('defaults', defaultOptions);
      this.loadFromHash('defaults', coreDefaultOptions);
    }

    Client.prototype.version = function() {
      return "iron_core_node-" + version;
    };

    Client.prototype.setOption = function(source, name, value) {
      if ((this.options[name] == null) && (value != null)) {
        return this.options[name] = value;
      }
    };

    Client.prototype.loadFromHash = function(source, hash) {
      var i, len, option, ref, results;
      if (hash != null) {
        ref = this.optionsList;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          option = ref[i];
          results.push(this.setOption(source, option, hash[option]));
        }
        return results;
      }
    };

    Client.prototype.loadFromEnv = function(prefix) {
      var i, len, option, ref, results;
      ref = this.optionsList;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        option = ref[i];
        results.push(this.setOption('environment variable', option, process.env[prefix + '_' + option.toUpperCase()]));
      }
      return results;
    };

    Client.prototype.getSubHash = function(hash, subs) {
      var i, len, sub;
      if (hash == null) {
        return null;
      }
      for (i = 0, len = subs.length; i < len; i++) {
        sub = subs[i];
        if (hash[sub] == null) {
          return null;
        }
        hash = hash[sub];
      }
      return hash;
    };

    Client.prototype.loadFromConfig = function(company, product, configFile) {
      var config, configData, realConfigFile;
      if (configFile != null) {
        realConfigFile = configFile.replace(/^~/, process.env.HOME);
        configData = '{}';
        try {
          configData = fs.readFileSync(realConfigFile);
        } catch (undefined) {}
        config = JSON.parse(configData);
        if (this.env != null) {
          this.loadFromHash(configFile, this.getSubHash(config, [this.env, company + "_" + product]));
          this.loadFromHash(configFile, this.getSubHash(config, [this.env, company, product]));
          this.loadFromHash(configFile, this.getSubHash(config, [this.env, product]));
          this.loadFromHash(configFile, this.getSubHash(config, [this.env, company]));
          this.loadFromHash(configFile, this.getSubHash(config, [company + "_" + product, this.env]));
          this.loadFromHash(configFile, this.getSubHash(config, [company, product, this.env]));
          this.loadFromHash(configFile, this.getSubHash(config, [product, this.env]));
          this.loadFromHash(configFile, this.getSubHash(config, [company, this.env]));
          this.loadFromHash(configFile, this.getSubHash(config, [this.env]));
        }
        this.loadFromHash(configFile, this.getSubHash(config, [company + "_" + product]));
        this.loadFromHash(configFile, this.getSubHash(config, [company, product]));
        this.loadFromHash(configFile, this.getSubHash(config, [product]));
        this.loadFromHash(configFile, this.getSubHash(config, [company]));
        return this.loadFromHash(configFile, this.getSubHash(config, []));
      }
    };

    Client.prototype.headers = function() {
      return {
        'User-Agent': this.options.user_agent
      };
    };

    Client.prototype.url = function() {
      return this.options.scheme + "://" + this.options.host + ":" + this.options.port + "/";
    };

    Client.prototype.request = function(requestInfo, cb, retry) {
      var requestBind;
      if (retry == null) {
        retry = 0;
      }
      requestBind = _.bind(this.request, this);
      return request(requestInfo, function(error, response, body) {
        var delay;
        if (error && !response) {
          return cb(error, response, body);
        } else if (response.statusCode >= 200 && response.statusCode < 300) {
          return cb(error, response, body);
        } else {
          if ((response.statusCode === 503 || response.statusCode === 408) && retry < MAX_RETRIES) {
            delay = Math.pow(4, retry) * 100 * Math.random();
            return _.delay(requestBind, delay, requestInfo, cb, retry + 1);
          } else {
            return cb(error, response, body);
          }
        }
      });
    };

    Client.prototype.get = function(method, params, cb) {
      var requestInfo;
      requestInfo = {
        method: 'GET',
        uri: this.url() + method,
        headers: this.headers(),
        qs: params
      };
      return this.request(requestInfo, cb);
    };

    Client.prototype.post = function(method, params, cb) {
      var requestInfo;
      requestInfo = {
        method: 'POST',
        uri: this.url() + method,
        headers: this.headers(),
        json: params
      };
      return this.request(requestInfo, cb);
    };

    Client.prototype.put = function(method, params, cb) {
      var requestInfo;
      requestInfo = {
        method: 'PUT',
        uri: this.url() + method,
        headers: this.headers(),
        json: params
      };
      return this.request(requestInfo, cb);
    };

    Client.prototype.patch = function(method, params, cb) {
      var requestInfo;
      requestInfo = {
        method: 'PATCH',
        uri: this.url() + method,
        headers: this.headers(),
        json: params
      };
      return this.request(requestInfo, cb);
    };

    Client.prototype["delete"] = function(method, params, cb) {
      var requestInfo;
      requestInfo = {
        method: 'DELETE',
        uri: this.url() + method,
        headers: this.headers(),
        json: params
      };
      return this.request(requestInfo, cb);
    };

    Client.prototype.parseResponse = function(error, response, body, cb, parseJson) {
      if (parseJson == null) {
        parseJson = true;
      }
      if (error) {
        return cb(error, null);
      } else if (response.statusCode >= 200 && response.statusCode < 300) {
        if (parseJson && typeof body === 'string') {
          body = JSON.parse(body);
        }
        return cb(null, body);
      } else {
        if (body instanceof String || typeof body === 'string') {
          return cb(new Error(body), null);
        } else if (body && body.msg) {
          return cb(new Error(body.msg), null);
        } else {
          return cb(new Error('Unknown error'), null);
        }
      }
    };

    return Client;

  })();

  module.exports.Client = Client;

}).call(this);
